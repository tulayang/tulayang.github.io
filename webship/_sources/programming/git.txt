Git 代码仓库工作流
==================================

**以下内容假设 Gitlab 作为代码仓库，在其网站创建了 duoda 组织，该组织下创建了 demo 仓库，称为（远程）主仓库，地址为 https://gitlab.com/duoda/demo.git 。**

获取代码副本
----------------------------------

通过 Gitlab 仓库网站的 fork （派生） 创建你自己的副本，之后，你能在自己的 Gitlab 空间获得一个副本，称为（远程）副本仓库，地址为 https://gitlab.com/{username}/demo.git 。然后使用 ``git clone`` 下载到你的本地磁盘：

.. container:: coder

  .. code-block:: sh

    $ git clone https://gitlab.com/{username}/demo.git


然后通过 ``git remote`` 为你磁盘的仓库添加远程副本仓库和远程主仓库的链接：

.. container:: coder

  .. code-block:: sh

    $ git remote add origin   https://gitlab.com/{username}/demo.git  # 远程副本仓库
    $ git remote add upstream https://gitlab.com/duoda/demo.git       # 远程主仓库

添加完后，使用 ``git remote --verbose`` 能够看到你现在已经添加了两个远程链接：

.. container:: coder

  .. code-block:: sh
  
    $ git remote --verbose
    origin  https://gitlab.com/{username}/demo.git
    remote  https://gitlab.com/duoda/demo.git

从远程主仓库获取更新
----------------------------------

当（远程）主仓库有新的更新时，你可以使用 ``git pull`` 下载最新的更新，并且自动合并：

.. container:: coder

  .. code-block:: sh

    $ git pull upstream {branchname}

另外一种方法是先使用 ``git fetch`` 下载最新的更新但不合并，然后使用 ``git merge`` 手动合并：

.. container:: coder

  .. code-block:: sh

    $ git fetch upstream {branchname}
    $ git merge {branchname} FETCH_HEAD

检查仓库之间的差异
---------------------------------- 

你可以使用 ``git diff`` 检查不同仓库之间的差异：

.. container:: coder

  .. code-block:: sh

    git diff --stat {branchname} upstream/{branchname}

推送到指定的分支
----------------------------------

把本地的副本仓库推送到远程的副本仓库：

.. container:: coder

  .. code-block:: sh

    $ git push origin {branchname}

参考文档
----------------------------------

- `Git 浅显易懂教程 <https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000>`_
- `Git 简易指南 <http://www.bootcss.com/p/git-guide/>`_
- `Git Pull Request 工作流 <http://blog.jobbole.com/76854/>`_  
- `Git Forking 工作流 <http://blog.jobbole.com/76854/>`_  