Development Process
===============================

.. container:: img

  .. code:: md


    勾画原型图 ------ 完整定义图形交互；每个用户界面应该独立、完整、简洁、交互保持最小原则（尽可能的少的交互，只有必要的交互）   

        |
        |
        ↓

    定义数据库的数据结构 ------ 以松散、关联为主；包括 Mysql 和 MongoDB 的事务相关

        |
        |
        ↓

    定义路由，包括 HTTP 请求方法、请求路径、请求头、请求体、响应状态码、响应头、响应体

        |
        |
        ↓

    定义特定算法的约定
        
        |
        |
        ↓

    构建任务池，分配任务，设定里程碑 ------ TODO → In Action → Done

        |
        |
        ↓
    
    周评 + 反馈 / 回答 + 记录 + 头脑风暴 + 聊天室讨论 + 动态例会 + issure


系统
-------------------------------

- 在总体上，系统一定不要设计的太细。大多数细粒度的想法在正式实施的时候，都不符合实际

- 系统应该是多个子系统组成的，这些子系统在设计上是粗粒度的，毫无干涉关系的。也就是说，你可以在以后随时更改其中的某些子系统，而不影响到其他的子系统（除了保持接口一直外）；而且，可以随时扩展更多的子系统

- 对于数据端和算法端，可以是多的、一直处于扩展的子系统

- 调度系统是复杂的，能够把一个程序拆分成多个独立的程序，就尽可能拆分

- 算法是简洁明了的，输入和输出！所以，尽可能把他们独立的放置到简洁的接口子系统中

- 对于图形界面，则比较复杂，必须良好的设计核心图形界面和不重要图形界面，让他们可以独立的合作，又不需要互相知道。他们应该是并存的，独立的，合作的

- 不过多的设计（对外接口）特别复杂的图形界面组件，尽可能设定一个边界，这个边界内可以由多个小的图形部件组合完成。但是，这个边界外，这个图形界面组件不对外产生影响



